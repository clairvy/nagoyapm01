# -*- mode: org; -*-

* Perl6 とは

  http://slashdot.jp/~taro-nishino/journal/486178

  Perl 6の長所

  後方互換性を壊す引換えに、少なくても言語レベルにおいて、Perl 6は以下のように、Perl 5がサポートしなかった高度でパワーのある言語概念を多く提供する。

  ・マルチメソッド
  ・コルーチン
  ・継続
  ・有用なスレッド
  ・ジャンクション
  ・ロール
  ・ハイパーオペレーション
  ・マクロ
  ・オーバーライド且つ再利用可能な文法
  ・ガーベジコレクション
  ・改善された外部関数インターフェース
  ・モジュールの別名化とバージョン化
  ・改善されたイントロスペクション
  ・拡張且つオーバーライド可能な原始データ

* Perl6 を入手する

   LLEval
   - http://colabv6.dan.co.jp/lleval.html

  Perl5
  - http://search.cpan.org/dist/perl/
    - http://www.activestate.com/activeperl - ppm
    - http://strawberryperl.com/ - cpan

  Perl6 - Rakudo
  - http://github.com/rakudo/star/downloads
    (Windows 版もあるらしい)
    - http://perl6.org/compilers/features
      実装対応表

  curl -LO https://github.com/downloads/rakudo/star/rakudo-star-2011.07.tar.gz
  tar xf rakudo-star-2011.07.tar.gz
  perl Configure.pl --gen-parrot
  make
  make install
  ./perl6 -v
  
  This is Rakudo Perl 6, version 2011.07 built on parrot 3.6.0 0

  Copyright 2008-2011, The Perl Foundation

  install ディレクトリの方には*.pir ファイルしか含まれていない様子
  (install/lib/parrot/3.6.0/languages/perl6/lib/)
  ソースを読むなら rakudo/src 配下がよさそう

* 基礎知識

  環境 / スクリプト / シェル / プロセス / OS
  ファイル / ディレクトリ階層

  - OS : Windows, Linux, MacOSX
  - ディレクトリ階層 : /usr/bin/perl, D:\Perl\bin\Perl.exe
    => エクスプローラで見たりするもの
  - プロセス : 実行可能ファイルをメモリにロードし，CPU が動かしている状態
    => ps, タスクマネージャ で確認できる
  - シェル : bash, cmd.com
    => CUI (キャラクタユーザインターフェイス)
    <=> GUI
    インタラクティブとも言う
    プロセス毎に環境変数を持つ
    => 大抵は初期化ファイルから読み込む($HOME/.bashrc．レジストリ)
  - パス = $PATH，%PATH% : 環境変数の一種．
    実行可能ファイルを探すための位置を指定する
    ex. $ echo $PATH
    > PATH
  - Perl スクリプト : 実行可能ファイルでPerl プログラムが書いてある．
    1行目は？
    #!/usr/bin/perl     => 絶対パス
    #!perl              => インストール前？Windows で拡張子に実行可能ファイルが割り振られている
    #!/usr/bin/env perl => 環境変数パスから探す．

    それ以外にも，
    $ /path_to/perl script.pl
    のようにPerl のパスを指定(/path_to/perl)してスクリプトを実行することもできる

  - ライブラリパス = @INC
    Perl スクリプトが，Perl のライブラリを探す方法．
    $ perl -V
    (中略)
    @INC:
      /Users/s_nag/perl5/perlbrew/perls/perl-5.14.1/lib/site_perl/5.14.1/darwin-2level
      /Users/s_nag/perl5/perlbrew/perls/perl-5.14.1/lib/site_perl/5.14.1
      /Users/s_nag/perl5/perlbrew/perls/perl-5.14.1/lib/5.14.1/darwin-2level
      /Users/s_nag/perl5/perlbrew/perls/perl-5.14.1/lib/5.14.1
      .

    ロードしたファイルのパス = %INC
    $ perl -mstrict -le 'while(($a,$b)=each%INC){print$a." ".$b}'
    strict.pm /Users/s_nag/perl5/perlbrew/perls/perl-5.14.1/lib/5.14.1/strict.pm

  - 言いたいこと
    ファイルとプロセスは違う
    スクリプト(*.pl, *.cgi) は，perl のプロセス上で動いている
    ファイルの探し方

* 周辺のコマンド
  
** 書いてみた
   input.txt
   output.txt

   <W>,<H>,<Game>

   <Hands>

   トップレベル関数 MAIN / USAGE
     Bool :$aaa 型も指定できる．コロンはオプション
   変数 @*INC
   コマンド ufo 
   http://modules.perl6.org/
   コマンド neutro -> panda
   NOTE panda requires wget
     $ panda help
     $ panda list
     $ panda info XXX
   my $file = open 'filename';
   for $file.lines -> $line {
     say $line;
   }
   close $file;
   slurp 'filename';
   given open('foo', :w) {
     .say('Hello, World');
     .close
   }
   @a[^10]

* Synopsys

** v6

use v6 コンパイラにPerl6 であることを伝える．

** コメント

| #(シャープ)                         | 行       |
| #`(シャープバックチック) + 括弧的な | 埋め込み |

** 逆スペース - 空白の無効化

| \(バックスラッシュ) |

unspace はコメントもスペースと見做す

** メソッド呼び出し

.method は $_ に対しての操作

** データ型

| P6opaque | 
|          |

property があるよ．
変数に型を付けられるよ．(role)
コンテナ型のみでも指定できる．
変数に型指定して初期化しなければ，型のundefined な値(型のプロトタイプオブジェクト)で初期化される．

** シジル

NOTE 添字([]，{})でアクセスする場合でもシジルは変化しない

| $ | scalar |
| @ | array  |
| % | hash   |

変数名に-も使えるよ

autovivification は，配列とか自動で初期化される機能
interpolation は，文字列の中の変数置換．array と hash の場合 {}で囲む．
%a{}(=valuesの意味)，@a.sort()とかは，interpolation で囲まないで使える．
=> は，Pair を作る．
infix は，中置演算子．
postcircumfix は，後置で囲む演算子．
sort は，小→大でsort．元の順序を保存する．
X は，デカルト積(直積)．
[] は，fold 的な．[\op] で部分結果を返す．ex [+] 1,2,3 #=> 6
'Q' [+ ':b'][+ ':s'][+ ':c'][+ ':w'] バッククォート展開，スカラ展開，クロージャ展開．空白分解．
identifier(...) は，関数呼び出し．
リストは，コンマ演算子で作る．ハッシュは，ペアのリストから作る．
:$a は，名前付きパラメータ．

| :q     | \\, \q, \'                     | q  |
| :b     | other \ s                      |    |
| :x     | シェルコマンド                 |    |
| :w     | 空白分解                       |    |
| :ww    | 空白分解．ただしクォートを除く |    |
| :s     | スカラ展開($stuff)             |    |
| :a     | 配列展開(@stuff[])             |    |
| :h     | ハッシュ展開(%stuff{})         |    |
| :f     | 関数展開(&stuff())             |    |
| :c     | クロージャ展開({code})         |    |
| :qq    | :s, :a, :h, :f, :c, :b         | qq |
| :regex | 正規表現として                 | m  |

型 は，制約．subset type．

** シグネチャ
| ($a)                | アリティ=1，書き込み不可．名前的に呼び出せる                           |
| ($a iw rw)          | アリティ=1，書き込み可                                                 |
| ($a?)               | オプション                                                             |
| ($x, $y = 2 * $x)   | デフォルト値付き                                                       |
| (:$width, :$height) | 名前付きパラメータ．呼び出すときは :width($w) ．位置的には呼び出せない |
| (*@rest)            | 丸呑みパラメータ．呼び出し側は(!@a)                                               |

** OO

| ($s:)                     | 呼び出し元オブジェクトに別名を付ける                                 |
| self                      | 呼び出し元オブジェクト                                               |
| method !method_name {...} | プライベートメソッド．self!method_name                               |
| has                       | アトリビュート                                                       |
| .                         | パブリックアトリビュート．アクセサを持ったプライベートアトリビュート |
| !                         | プライベートアトリビュート                                           |
| is rw                     | アクセサを作る                                                       |
| is                        | 継承                                                                 |
| does                      | ロールを持つ                                                         |

$obj.method: @args でも呼べる
ロールは，コードの再利用．

** ジャンクション

| any | ｜ |
| one | ^  |
| all | &  |

** コンテキスト

| ~stuff      | 文字列           |
| ?stuff      | 真理値           |
| +stuff      | 数値             |
| -stuff      | 数値             |
| $( stuff )  | 一般要素         |
| @( stuff )  | リスト           |
| %( stuff )  | ハッシュ         |
| @@( stuff ) | lol コンテキスト |
   
list of list コンテキスト

** ルール (正規表現)
| [...]    | キャプチャしないグループ |                          |
| <[...]>  | 文字クラス               |                          |
| <-[...]> | 否定の文字クラス         |                          |
| ^ ($)    | 文字列の先頭 (末尾)      |                          |
| ^^ ($$)  | 行頭 (行末)              |                          |
| :i       | :ignorecase              | ignore case              |
| :m       | :ignoremark              | ignore mark              |
| :g       | :global                  | global                   |
| :s       | :sigspace                | match space              |
| :P5      | :Perl5                   | Perl5                    |
| :4x      | :x(4)                    | 4回マッチする            |
| :3rd     | :nth(3)                  | 3番目のマッチ            |
| :ov      | :overlap                 | オーバーラップしたマッチ |
| :ex      | :exhaustive              | マッチ可能性全部         |
|          | :ratchet                 | バックトラックしない     |
| $/       | マッチオブジェクト       |                          |
~~

** Array

| elems | サイズ |

** String

| chars | | 
| bytes | |

* ご参考

  去年のAdvent Calendar．日本語の記事
  http://perl-users.jp/articles/advent-calendar/2010/perl6/

  Perl 5 to 6 これはいいまとめ
  http://perlgeek.de/en/article/5-to-6
  http://perlgeek.de/en/article/discovering-meta-object-protocol
  http://outer-inside.blogspot.com/search/label/perl-5-to-6 (日本語訳)

  Apocalypse (Synopsys の要約)
  http://dev.perl.org/perl6/doc/apocalypse.html

  やっぱり一次情報でしょ - Synopsys
  http://perlcabal.org/syn/

  Perl6 book
  https://github.com/perl6/book/downloads

